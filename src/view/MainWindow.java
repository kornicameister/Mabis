/**
 * package view in MABIS
 * by kornicameister
 */
package view;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.MenuBar;
import java.util.HashMap;

import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JTable;
import javax.swing.JToolBar;
import javax.swing.SwingConstants;
import javax.swing.border.BevelBorder;
import javax.swing.border.EtchedBorder;

import view.utilities.StatusBar;

/**
 * This is the main window class that presented to the user in the beginning and
 * works as singleton aggregating most of actions and passing them to external
 * listeners
 * 
 * @author kornicameister
 * @version 0.1
 * @see java.swing.JFrame
 */
public class MainWindow extends JFrame {

	/**
	 * The value of this constant is {@value} and it was autogenerated
	 */
	private static final long serialVersionUID = 2740437090361841747L;
	/**
	 * Menu bar of the main windows, contains all the actions even those not
	 * included in main window content area
	 */
	private JMenuBar menuBar;
	/**
	 * ToolBar aggregates buttons triggering most used actions. Contains:
	 * <ul>
	 * <li>zoom combo box</li>
	 * <li>group by combo box</li>
	 * <li>search text field</li>
	 * <li>search button</li>
	 * </ul>
	 * to perform operations againt collection view
	 */
	private JToolBar toolBar;

	/**
	 * JPanel for entire JFrame, all elements are going to be placed upon him
	 */
	private JPanel contentPane;

	/**
	 * JPanel to hold collection view, that will be computeted and presented in
	 * user specified form, meaning as:
	 * <ul>
	 * <li>covers composition</li>
	 * <li>list of entities</li>
	 * </ul>
	 */
	private JPanel collectionView;

	/**
	 * JPanel containing:
	 * <ul>
	 * <li>dynamic status bar, displaying <b>runtime</b> information</li>
	 * <li>constant status bar, displaying <b>database usage statistic</b></li>
	 * </ul>
	 * 
	 * @see MainWindow#databaseStatusBar
	 * @see MainWindow#statusBar
	 */
	private JPanel bottomPanel;

	/**
	 * JScrollPanel containing list of user located at the remote server Users
	 * that are friends are marked highlighted, those considered foes are
	 * blocked
	 */
	private JScrollPane userList;

	/**
	 * StatusBar to print runtime information
	 * 
	 * @see StatusBar
	 */
	private StatusBar statusBar;

	/**
	 * JPanel to aggregate action buttons
	 * 
	 * @see JPanel
	 */
	private JPanel actionsPanel;

	/**
	 * JButton to trigger action responsible for publishing local collection and
	 * placing it on the remote server
	 */
	private JButton publishButton;

	/**
	 * Represent choosen category which is used to group collection view againts
	 * specified criteria
	 */
	private String groupBy = "null";

	/**
	 * button to toogle connection by following pattern
	 * <ul>
	 * <li>when disconnected, connection attempt will be performed + user list
	 * will be displayed</li>
	 * <li>when connection, connection will be lost</li>
	 * </ul>
	 * What is important here, that connection is understood as <b>
	 * 
	 * <pre>
	 * being logged in to program,not database
	 * </pre>
	 * 
	 * </b>
	 */
	private JButton toogleConnection;

	/**
	 * JButton to exit from the application. </br> <b>Notice</b> that exit
	 * process will trigger database disconnection event
	 */
	private JButton exitButton;

	/**
	 * JButton to add new item to the database</br> When triggered user is asked
	 * what kind of item he would like to add only when <b>Collection view</b>
	 * is set to <b><i>ALL</i></b>
	 */
	private JButton newItem;

	/**
	 * JButton to edit selected, from <b>Collection view</b>, item
	 */
	private JButton editButton;

	/**
	 * JButton to show JFrame containing currently loggeed user informations and
	 * statistics
	 */
	private JButton aboutMe;

	/**
	 * Constructor of the main windows, calls for all private method to
	 * initialize the end user view
	 * 
	 * @param title
	 *            title of the window
	 * @param d
	 *            dimension of the window
	 * @see Dimension
	 */
	public MainWindow(String title, Dimension d) {
		super(title);
		
		setSize(d);

		initMenuBar();
		initUserContent();
		establishActionConnections();

		setSize(d);

		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setDefaultLookAndFeelDecorated(false);
		setLocationRelativeTo(null); // centering on the screen
	}

	/**
	 * method goes throughout all fields of {@link MainWindow} and 
	 * add actionListeners to every each one of them that requires it
	 */
	private void establishActionConnections() {
	}

	/**
	 * Method is taking care of initializing window content, that is:
	 * <ul>
	 * <li>collection view</li>
	 * <li>friends list</li>
	 * <li>friends interaction block</li>
	 * <li>buttons</li>
	 * </ul>
	 * and placing it on layouts
	 */
	private void initUserContent() {
		// adding content jpanel
		contentPane = new JPanel(true);
		contentPane.setBorder(BorderFactory
				.createEtchedBorder(EtchedBorder.RAISED));

		this.setContentPane(contentPane);

		GroupLayout layout = new GroupLayout(getContentPane());
		getContentPane().setLayout(layout);

		// content
		initToolBar();
		initCollectionView();
		initUserList();
		initBottomPanel();

		layout.setAutoCreateGaps(true);
		layout.setAutoCreateContainerGaps(true);

		layout.setHorizontalGroup(layout
				.createParallelGroup(Alignment.CENTER)
				.addComponent(toolBar, GroupLayout.DEFAULT_SIZE,
						GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				.addGroup(
						layout.createSequentialGroup()
								.addComponent(collectionView,
										GroupLayout.PREFERRED_SIZE,
										GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE)
								.addGroup(
										layout.createParallelGroup(
												Alignment.TRAILING)
												.addComponent(
														userList,
														GroupLayout.PREFERRED_SIZE,
														GroupLayout.DEFAULT_SIZE,
														200)))
				.addComponent(bottomPanel, GroupLayout.DEFAULT_SIZE,
						getContentPane().getWidth(), Short.MAX_VALUE));

		layout.setVerticalGroup(layout
				.createSequentialGroup()
				.addComponent(toolBar, GroupLayout.PREFERRED_SIZE, 40,
						GroupLayout.PREFERRED_SIZE)
				.addGroup(
						layout.createParallelGroup(Alignment.BASELINE)
								.addComponent(collectionView)
								.addGroup(
										layout.createSequentialGroup()
												.addComponent(userList)))
				.addComponent(bottomPanel, GroupLayout.PREFERRED_SIZE,
						GroupLayout.DEFAULT_SIZE, 50));

		this.revalidate();
		this.repaint();
		this.pack();
	}

	/**
	 * Method is taking care of initializing bottom panel that contains
	 * 
	 * <ul>
	 * <li> {@link MainWindow#statusBar}</li>
	 * <li> {@link MainWindow#databaseStatusBar}</li>
	 * <li> {@link MainWindow#publishButton}</li>
	 * <ul>
	 */
	private void initBottomPanel() {
		bottomPanel = new JPanel(true);
		bottomPanel.setBorder(BorderFactory.createEmptyBorder());

		statusBar = new StatusBar();
		statusBar.setBorder(BorderFactory
				.createBevelBorder(BevelBorder.LOWERED));

		actionsPanel = new JPanel(new FlowLayout());
		actionsPanel.setBorder(BorderFactory.createEmptyBorder());

		toogleConnection = new JButton("Connect");
		newItem = new JButton("New");
		editButton = new JButton("Edit");
		exitButton = new JButton("Exit");
		aboutMe = new JButton("User");

		actionsPanel.add(aboutMe);
		actionsPanel.add(new JLabel("|"));
		actionsPanel.add(newItem);
		actionsPanel.add(editButton);
		actionsPanel.add(new JLabel("|"));
		actionsPanel.add(toogleConnection);
		actionsPanel.add(exitButton);

		publishButton = new JButton("Sync up");

		// organizing into the layout
		GroupLayout layout = new GroupLayout(bottomPanel);
		bottomPanel.setLayout(layout);

		layout.setAutoCreateGaps(true);
		layout.setAutoCreateContainerGaps(true);

		layout.setHorizontalGroup(layout
				.createSequentialGroup()
				.addGroup(
						layout.createParallelGroup()
								.addComponent(actionsPanel, 100,
										this.getWidth() - 200, this.getWidth())
								.addComponent(statusBar, 100,
										this.getWidth() - 200, this.getWidth()))
				.addComponent(publishButton, GroupLayout.DEFAULT_SIZE, 140,
						GroupLayout.PREFERRED_SIZE));

		layout.setVerticalGroup(layout.createSequentialGroup().addGroup(
				layout.createParallelGroup()
						.addGroup(
								layout.createSequentialGroup()
										.addComponent(actionsPanel)
										.addComponent(statusBar))
						.addComponent(publishButton, GroupLayout.DEFAULT_SIZE,
								62, GroupLayout.PREFERRED_SIZE)));

		layout.linkSize(SwingConstants.HORIZONTAL, statusBar, actionsPanel);
	}

	/**
	 * Method initializes userList panel along with all subcomponents 
	 * actions and buttons
	 */
	private void initUserList() {
		JPanel userListPanel = new JPanel(new BorderLayout(), true);

		userList = new JScrollPane(userListPanel);
		userList.setWheelScrollingEnabled(true);
		userList.setBorder(BorderFactory.createTitledBorder(
				BorderFactory.createEtchedBorder(EtchedBorder.RAISED), "Users"));

		// TODO add action to view menu
		JPopupMenu userMenu = new JPopupMenu("Friend popup");
		userMenu.add(new JMenuItem("Chat"));
		userMenu.add(new JSeparator(JSeparator.HORIZONTAL));
		userMenu.add(new JMenuItem("List collection"));
		userMenu.add(new JSeparator(JSeparator.HORIZONTAL));
		userMenu.add(new JMenuItem("Make friend"));
		userMenu.add(new JMenuItem("Block"));
		userMenu.setSelected(collectionView);

		// creating table view for user list
		JTable userTable = new JTable(20, 3);

		// setting up to hierarchy
		userListPanel.add(userTable);
		userListPanel.setComponentPopupMenu(userMenu);
	}

	/**
	 * Method initialized collection view along with all
	 * subcomponents
	 */
	private void initCollectionView() {
		collectionView = new JPanel(new BorderLayout(), true);
		collectionView.setBorder(BorderFactory.createTitledBorder(
				BorderFactory.createEtchedBorder(EtchedBorder.RAISED),
				"Collection"));

		// TODO add listener
		JPopupMenu collectionMenu = new JPopupMenu("Collection popup menu");
		collectionMenu.add(new JMenuItem("Edit"));
		collectionMenu.add(new JMenuItem("Remove"));
		collectionMenu.add(new JMenuItem("Publish/Unpublish"));
		collectionMenu.setSelected(collectionView);
	}

	/**
	 * Method initialize toolbar of the application by adding shortcut buttons
	 * triggering top actions from each menu and place it on panel
	 */
	private void initToolBar() {
		toolBar = new JToolBar("Mabis toolbar", JToolBar.HORIZONTAL);
		toolBar.setLayout(new FlowLayout(FlowLayout.CENTER));
		toolBar.setOpaque(false);
		toolBar.setAutoscrolls(false);
		toolBar.setFloatable(false);
		toolBar.setRollover(false);

		// database
		String z[] = { "Online", "Local" };
		JComboBox<String> dbContent = new JComboBox<String>(z);
		JLabel collectionLabel = new JLabel("Collection : ");
		collectionLabel.setLabelFor(dbContent);
		toolBar.add(collectionLabel);
		toolBar.add("Collection", dbContent);

		// zoom ;-)
		String zz[] = { "100%", "90%", "80%", "70%", "60%", "50%", "40%",
				"30%", "20%", "10%" };
		JComboBox<String> zoomContent = new JComboBox<String>(zz);
		JLabel zoomLabel = new JLabel("Zoom : ");
		zoomLabel.setLabelFor(zoomContent);
		toolBar.add("Zoom", zoomLabel);
		toolBar.add("Zoom", zoomContent);

		// view mode ;-)
		String zzz[] = { "All", "Books", "Movies", "Music" };
		JComboBox<String> viewModeContent = new JComboBox<String>(zzz);
		JLabel viewModeLabel = new JLabel("View : ");
		viewModeLabel.setLabelFor(viewModeContent);
		toolBar.add(viewModeLabel);
		toolBar.add("View as", viewModeContent);

		// group by
		// hint -> here
		HashMap<String, String[]> groups = new HashMap<String, String[]>();
		String bookGroup[] = { "Author", "ISBN" };
		String movieGroup[] = { "Director" };
		String audioGroup[] = { "Band" };
		String mutualGroup[] = { "No group", "Title", "Year", "Genre" };
		groups.put("book", bookGroup);
		groups.put("movie", movieGroup);
		groups.put("audio", audioGroup);
		groups.put("null", mutualGroup);

		JComboBox<String> groupBy = new JComboBox<String>(
				groups.get(this.groupBy));
		JLabel groupByLabel = new JLabel("Group by : ");
		groupByLabel.setLabelFor(groupBy);
		toolBar.add(groupByLabel);
		toolBar.add("Group by", groupBy);

		JButton revalidateButton = new JButton("Evaluate");
		toolBar.add(revalidateButton);
	}

	/**
	 * Method initialize menuBar and its content along with all required
	 * listeners that are to listen key shortcuts or clicks triggering some
	 * action
	 * 
	 * @see MenuBar
	 */
	private void initMenuBar() {
		// customizing menu bar
		menuBar = new JMenuBar();

		// file menu
		JMenu file = new JMenu("File");
		file.add(new JMenuItem("Connect"));

		// collection menu
		JMenu collection = new JMenu("Connection");
		collection.add(new JMenuItem("Publish"));

		// friends menu
		JMenu friends = new JMenu("Friends");
		friends.add(new JMenuItem("List"));

		// data menu
		JMenu data = new JMenu("Data");
		data.add("Action");

		// Help
		JMenu help = new JMenu("Help");
		help.add(new JMenuItem("About"));

		menuBar.add(file);
		menuBar.add(collection);
		menuBar.add(friends);
		menuBar.add(data);
		menuBar.add(help);

		// this.setMenuBar(menuBar);
		this.setJMenuBar(menuBar);
	}

}
