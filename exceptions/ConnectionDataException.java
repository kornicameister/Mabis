package exceptions;

import database.MySQLAccess.ConnectionData;

public class ConnectionDataException extends Exception {

	/**
	 * The value of this constant is {@value} and it was autogenerated
	 */
	private static final long serialVersionUID = -6366616777977244265L;

	/**
	 * Field contains description of an error that is related to ConnectionData
	 * </br><b>Note</b> that this field by default contains
	 * 
	 * <pre>
	 * null string
	 * </pre>
	 * 
	 * which means that ConnectionData was free of errors
	 * 
	 * @see {@link ConnectionDataException#setDataError(ConnectionData)}
	 * @see ConnectionData
	 */
	private String dataErrorStr;

	public ConnectionDataException() {
		this.dataErrorStr = new String("null");
	}

	/**
	 * Construct {@link ConnectionDataException} with <b>message</b> param. This
	 * constructor wraps {@link Exception#Exception(String)} constructor
	 * 
	 * @param message
	 */
	public ConnectionDataException(String message) {
		super(message);
		this.dataErrorStr = new String("null");
	}

	/**
	 * Construct {@link ConnectionDataException} with
	 * <ul>
	 * <li><b>message</b></li>
	 * <li><b>database data</b></li>
	 * </ul>
	 * 
	 * @param message
	 * @param data
	 */
	public ConnectionDataException(String message, ConnectionData data) {
		super(message);
		this.setDataError(data);
	}

	private void setDataError(ConnectionData data) {
		this.dataErrorStr = "ConnectionData status : \n";
		if (data.getLogin().isEmpty()) {
			this.dataErrorStr += " - Login was not set\n";
		}
		if (data.getPassword().isEmpty()) {
			this.dataErrorStr += " - Passoword was not set\n";
		}
		if (data.getHost().isEmpty()) {
			this.dataErrorStr += " - Host was not set\n";
		}
	}

	/**
	 * <b>printDataError</> prints {@link ConnectionDataException#dataErrorStr}
	 * and returns it
	 * 
	 * @return the dataErrorStr
	 */
	public String printDataError() {
		System.out.println(this.dataErrorStr);
		return dataErrorStr;
	}
}
